<!-- Open AI -->

 const gptResults = await openai.chat.completions.create({
        messages: [{ role: 'user', content: gptQuery }],
        model: 'gpt-4o-mini',
      });

    const handleGptSearchResults = async () => {
      console.log(gptSearchInput.current.value)

      const gptQuery = "Act like a movie recomandation system . Give me some movie results for the query :"+gptSearchInput.current.value+".Only me 5 movie suggestion which is seprated by comma like the example result ahead. Example result : Golmall, Don, Koi Mil Gya, Hera Pheri, Phir Hera Pheri"

      const gptResults = await openai.chat.completions.create({
        messages: [{ role: 'user', content: gptQuery }],
        model: 'gpt-3.5-turbo',
        store: true
    });
      

      console.log(gptResults.choices[0])
    }


<!-- Gemini -->
const searchMoviesFrmTMDB = async (movie) => {
      const data = await fetch("https://api.themoviedb.org/3/search/movie?query="+ movie +"&include_adult=false&language=en-US&page=1", API_Options)

      const json = await data.json();
      return json.results;
    }

    const handleGenaiSearch = async () => {

      const prompt = "Act like a movie recomandation system . Give me some movie results for the query :"+gptSearchInput.current.value+".Give me top 5 movie names suggestions which is seprated by comma like the example result ahead. Example result : Golmall, Don, Koi Mil Gya, Hera Pheri, Phir Hera Pheri";
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      const result = await model.generateContent(prompt);
      // console.log(result.response.text());

      const genaiMovies = result.response.text().split(",");
      
      const moviesArray = genaiMovies?.map((movie) => searchMoviesFrmTMDB(movie));

      const movieResults = await Promise.all(moviesArray);
      
      dispatch(genAiMovieSearch({movieNames: genaiMovies, movieResults: movieResults}))
    }


// Movie card ---

import React from 'react'
import { Movie_Banner_URL } from '../constants'

const MovieCard = ({ posterPath, id, onClick }) => {
  if (!posterPath) return null;

  return (
    <div
      className="w-[150px] md:w-[200px] h-[250px] rounded-lg md:mx-0 mx-2 hover:scale-110 transition-transform duration-200 ease-in-out"
      onClick={() => onClick}
    >
      <img
        className="w-[185px] h-[240px] rounded-lg cursor-pointer"
        alt="Movie Banner"
        src={Movie_Banner_URL + posterPath}
      />
    </div>
  );
};

export default MovieCard;


// Movie List ---

import React, { useState } from 'react'
import MovieCard from './MovieCard';
import MovieModal from './movieOpen/movieSeen';

const MovieList = ({ title, movies }) => {
  const [selectedMovieId, setSelectedMovieId] = useState(null);

  return (
    <div className='md:-mt-32 md:x-8 mx-3 my-7 md:my-40'>
      <h1 className='text-white text-lg md:text-2xl font-serif my-2'>{title}</h1>
      
      <div className='flex overflow-x-scroll scrollbar-hide overflow-y-hidden'>
        <div className='flex'>
          {movies?.map((movie) => (
            <MovieCard
              key={movie?.id}
              posterPath={movie?.poster_path}
              id={movie?.id}
              onClick={() => setSelectedMovieId(movie?.id)}
            />
          ))}
        </div>
      </div>

      {/* Modal */}
      <MovieModal movieId={selectedMovieId} onClose={() => setSelectedMovieId(null)} />
    </div>
  )
}

export default MovieList;


