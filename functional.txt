<!-- Open AI -->

 const gptResults = await openai.chat.completions.create({
        messages: [{ role: 'user', content: gptQuery }],
        model: 'gpt-4o-mini',
      });

    const handleGptSearchResults = async () => {
      console.log(gptSearchInput.current.value)

      const gptQuery = "Act like a movie recomandation system . Give me some movie results for the query :"+gptSearchInput.current.value+".Only me 5 movie suggestion which is seprated by comma like the example result ahead. Example result : Golmall, Don, Koi Mil Gya, Hera Pheri, Phir Hera Pheri"

      const gptResults = await openai.chat.completions.create({
        messages: [{ role: 'user', content: gptQuery }],
        model: 'gpt-3.5-turbo',
        store: true
    });
      

      console.log(gptResults.choices[0])
    }


<!-- Gemini -->
const searchMoviesFrmTMDB = async (movie) => {
      const data = await fetch("https://api.themoviedb.org/3/search/movie?query="+ movie +"&include_adult=false&language=en-US&page=1", API_Options)

      const json = await data.json();
      return json.results;
    }

    const handleGenaiSearch = async () => {

      const prompt = "Act like a movie recomandation system . Give me some movie results for the query :"+gptSearchInput.current.value+".Give me top 5 movie names suggestions which is seprated by comma like the example result ahead. Example result : Golmall, Don, Koi Mil Gya, Hera Pheri, Phir Hera Pheri";
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      const result = await model.generateContent(prompt);
      // console.log(result.response.text());

      const genaiMovies = result.response.text().split(",");
      
      const moviesArray = genaiMovies?.map((movie) => searchMoviesFrmTMDB(movie));

      const movieResults = await Promise.all(moviesArray);
      
      dispatch(genAiMovieSearch({movieNames: genaiMovies, movieResults: movieResults}))
    }


// Movie card ---

import React from 'react'
import { Movie_Banner_URL } from '../constants'

const MovieCard = ({ posterPath, id, onClick }) => {
  if (!posterPath) return null;

  return (
    <div
      className="w-[150px] md:w-[200px] h-[250px] rounded-lg md:mx-0 mx-2 hover:scale-110 transition-transform duration-200 ease-in-out"
      onClick={() => onClick}
    >
      <img
        className="w-[185px] h-[240px] rounded-lg cursor-pointer"
        alt="Movie Banner"
        src={Movie_Banner_URL + posterPath}
      />
    </div>
  );
};

export default MovieCard;


// Movie List ---

import React, { useState } from 'react'
import MovieCard from './MovieCard';
import MovieModal from './movieOpen/movieSeen';

const MovieList = ({ title, movies }) => {
  const [selectedMovieId, setSelectedMovieId] = useState(null);

  return (
    <div className='md:-mt-32 md:x-8 mx-3 my-7 md:my-40'>
      <h1 className='text-white text-lg md:text-2xl font-serif my-2'>{title}</h1>
      
      <div className='flex overflow-x-scroll scrollbar-hide overflow-y-hidden'>
        <div className='flex'>
          {movies?.map((movie) => (
            <MovieCard
              key={movie?.id}
              posterPath={movie?.poster_path}
              id={movie?.id}
              onClick={() => setSelectedMovieId(movie?.id)}
            />
          ))}
        </div>
      </div>

      {/* Modal */}
      <MovieModal movieId={selectedMovieId} onClose={() => setSelectedMovieId(null)} />
    </div>
  )
}

export default MovieList;


// Bg Video Title ---
import React, { useRef, useState } from 'react'
import { MoviePlayer_URL } from '../constants';

const BgVideoTitle = ({title, description, id}) => {
    const [showDescription, setShowDescription] = useState(false)
    const vdoPlayerRef = useRef();

    // const goToReviewPage = () => {
    //     window.open(MoviePage_URLPi + id + MoviePage_URLPii, '_blank')
    //   };

    // const handleClick = () => {
    //     window.open(MoviePlayer_URL + id, '_blank')
    //   };

    const handlePlayer = () => {
        setTimeout(() => {
          if (vdoPlayerRef.current?.requestFullscreen) {
            vdoPlayerRef.current.requestFullscreen();
          }
        }, 200);
    }

  return (
    <div className='absolute text-white font-serif bg-gradient-to-b from-black w-screen aspect-video md:mt-0 mt-[32px]'>
        <div className='my-[17%] mx-4 md:mx-10'>
            <h1 className='text-xl md:text-6xl font-serif font-extrabold'>{title}</h1>
            {showDescription && <p className='md:w-1/2 text-xs md:text-lg my-1 md:my-4 '>{description}</p>}
            <div className='flex flex-wrap md:ml-0 my-2 md:my-7'>
                <button className='bg-white text-black w-20 md:w-36 h-6 md:h-10 rounded-md hover:bg-opacity-80' onClick={handleClick}>â–¶ Play</button>
                <button className=' bg-gray-500 text-black w-20 md:w-36 h-6 md:h-10 rounded-md mx-3 hover:bg-opacity-80' onClick={() => setShowDescription(!showDescription)}> More Info</button>
            </div>
        </div>
    </div>
  )
}

export default BgVideoTitle;



/// 
import React, { useRef, useState } from 'react';
import { MoviePlayer_URL } from '../constants';
import { FaPlay } from 'react-icons/fa';
import { RxCross1 } from 'react-icons/rx';

const BgVideoTitle = ({ title, description, id }) => {
  const [showDescription, setShowDescription] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const vdoPlayerRef = useRef(null);

  const handlePlay = () => {
    setIsPlaying(true);
    setTimeout(() => {
      if (vdoPlayerRef.current?.requestFullscreen) {
        vdoPlayerRef.current.requestFullscreen();
      }
    }, 200);
  };

  const handleClose = () => {
    setIsPlaying(false);
    document.exitFullscreen?.(); // optional: exit fullscreen
  };

  return (
    <div className="relative text-white font-serif bg-gradient-to-b from-black w-screen aspect-video md:mt-0 mt-[32px]">
      {isPlaying ? (
        <div ref={vdoPlayerRef} className="relative w-full h-full md:h-screen">
          <iframe
            src={MoviePlayer_URL + id}
            allowFullScreen
            title="Movie Player"
            className="w-full h-full rounded-md"
          />
          <button
            className="absolute top-4 right-6 text-white text-3xl z-10"
            onClick={handleClose}
          >
            <RxCross1 />
          </button>
        </div>
      ) : (
        <div className="my-[17%] mx-4 md:mx-10">
          <h1 className="text-xl md:text-6xl font-serif font-extrabold">{title}</h1>
          {showDescription && (
            <p className="md:w-1/2 text-xs md:text-lg my-1 md:my-4">{description}</p>
          )}
          <div className="flex flex-wrap md:ml-0 my-2 md:my-7">
            <button
              className="bg-white text-black w-20 md:w-36 h-6 md:h-10 rounded-md hover:bg-opacity-80 flex items-center justify-center gap-2"
              onClick={handlePlay}
            >
              <FaPlay className="text-sm md:text-base" /> Play
            </button>
            <button
              className="bg-gray-500 text-black w-20 md:w-36 h-6 md:h-10 rounded-md mx-3 hover:bg-opacity-80"
              onClick={() => setShowDescription(!showDescription)}
            >
              More Info
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default BgVideoTitle;


Headerhome main div css---
w-full z-10 absolute top-0 left-0 flex flex-wrap items-center justify-between px-4 py-2 md:px-8 md:py-3 bg-gradient-to-b from-black md:bg-transparent


w-full absolute pt-1 md:pt-0 lg:px-15 lg:mx-15 md:py-3 z-10 bg-gradient-to-b from-black flex justify-between items-center flex-wrap md:flex-row md:bg-transparent